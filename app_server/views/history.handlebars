<script type="text/javascript" src="/javascripts/tail.datetime.min.js"></script>

<div class="container">
  <div class="columns">
    <div class="column is-four-fifths">
      <h1 class="title"> {{pageHeader.title}} </h1>
      <h2 class="subtitle"> {{pageHeader.strapline}}</h2>
    </div>
    <div class="column">
      <a href="/live/{{group.id}}" class="button is-link is-rounded"> Accès aux données temps réel</a>
    </div>
  </div>  
</div>
<hr/>

<div class="container box"> 
  <div class="columns">
    <div class="column is-three">
        <div class="columns datePickers">
          <div class="column field is-three"> 
            <label class="label" for=""> Date de début :
            </label>
            <div class="control">
              <input id="startDate" type="text" class="tail-datetime-field" placeholder="YYYY-MM-DD HH:MM:SS"/>
            </div>
          </div>
          <div class="column field is-three"> 
            <label class="label" for=""> Date de fin :
            </label>
            <div class="control">
              <input id="endDate" type="text" class="tail-datetime-field" placeholder="YYYY-MM-DD HH:MM:SS"/>
            </div>
          </div>
        </div>
        <div class="columns">
          <div class="column">
            <div class="control"> 
              <button onclick='updateDatas()' class="button is-info"> Actualiser </button>
            </div>
          </div>
        </div>
    </div>
 
    <div class="column is-three">
     
    </div>
    <div class="column is-three">
      <div class="field">
      <label class="label" for="select-range">Période d'affichage :
         <p class="is-small" style="font-weight: normal; font-style:italic">Actualisation automatique</p>
      </label>
        <div class="control">
          <div class="select">
            <select class="range" id="select-range" name="select-range">
              <option value="day" selected>Dernière 24heures</option>
              <option value="week">Derniere semaine</option>
              <option value="month">Dernier mois</option>
              <option value="year">Dernière année</option>
              <option value="ever">Depuis le début des mesures</option>
            </select> 
          </div>
        </div>
      </div>
    </div>

    

  </div>
</div>

<div class="container box">
{{#each sensInfos}}
  <a class="button is-rounded is-light is-success" href='#{{this.id}}'> {{this.name}}</a>
{{/each}}
</div>

<!--input type="text" class="tail-datetime-field" />
<input type="text" id="dtRome" /-->
<!-- test tmp 
<a id='link' download='filename.png'>Save as Image</a>
-->
{{#each sensInfos}} 
<div class="container">
  <div class="columns">
    <div class="column is-full">
      <div id='{{this.id}}' class="card">
        <header class="card-header">
          <p class="card-header-title is-centered">
            Capteur : {{this.name}}
          </p>
        </header>
        <div  class="card-content">
          <div class="content">
            <p> Métrique : {{this.metric}} en {{this.unit}}
            </p>
            <div class="columns">
              <div class="column">
                <p> <a onclick="download_csv('{{this.id}}')"><i class="fa fa-download" aria-hidden="true"></i>
                Télécharger les données </a>
                </p>
              </div>
              <div class="column">
                 <p> 
                   <a target="_blank" id="img-{{this.id}}" download='{{this.name}}.png'><i class="fa fa-download" aria-hidden="true"></i>
                    Télécharger le graphique </a>
                    
                   <!--a onclick="download_graph(this,'{{this.id}}')"><i class="fa fa-download" aria-hidden="true"></i>
                Télécharger le graphique </a-->
                </p>
              </div>
            </div>
          </div>
          <div class="box chartContainer" id="chart-{{this.id}}">
            
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
{{/each}}

<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.25.3/moment.min.js" type="text/javascript"></script>
<script type="text/javascript" src="/javascripts/moment-timezone-with-data-10-year-range.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"></script>

<script type="text/javascript">
  document.addEventListener("DOMContentLoaded", function(){
    tail.DateTime(".tail-datetime-field", { /* Your Options */ 
        dateFormat: "YYYY-mm-dd",
        timeFormat: "HH:ii:ss",
    });
  });

var selectRange = document.getElementById('select-range'); 
var charts = document.getElementsByClassName('chartContainer'); 
var tz = '{{group.tz}}'; 
var canvasArray = [];
//var json; 
function createConfig(sensorId) {
    return {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                //label: 'if we want label: display false in options.legend',
                borderColor:  'rgb(78,162,97)',
                backgroundColor: 'rgb(255,255,255)',
                data: [],
                fill: false,
                borderWidth: 2,
                bezierCurve:false
            }
            ]
        },
        
        options: {
            legend: { 
              display:false 
            }, 
            bezierCurve : false,
            animation: {
              onComplete :  function(){    
                var imgLink = document.getElementById('img-'+sensorId); 
                imgLink.href = this.toBase64Image();
              }
            },
            responsive: true,
           /* title: {
                display: true,
                text: ' Todo titre'
            },*/
           /* tooltips: {
                position: position,
                mode: 'index',
                intersect: false,
            },*/
            scales: {
                yAxes: [{
                    ticks: {
                       beginAtZero: true // if we want to begin y label at 0 (how about negative temp? )
                    }
                }],
                xAxes: [{
                    type: 'time'
                }]
            }
        }
    };
};

// helper from https://plainjs.com/javascript/ajax/send-ajax-get-and-post-requests-47/ 
 function getAjax(url, success) {
    var xhr =  window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
    xhr.open('GET', url);
    xhr.onreadystatechange = function() {
        if (xhr.readyState>3 && xhr.status==200) success(xhr.responseText);
    };
    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    xhr.send();
    return xhr;
}

function ajaxPromise (url) {
  return new Promise ((resolve,reject) => {
    getAjax(url,(success) => {
      resolve(success); 
    });
  });
}
// Initiate data by default range
//var initChartDatas = function (chart,sensorId,timezone,range) {
var initChartDatas = async function (chart,sensorId,timezone) {
    try {    
     // var url = window.location.href+"/"+sensorId+"?tz="+timezone+"&range="+range;
     // par 
      var now =  moment().tz(tz)
      var nowTmp =  moment().tz(tz)
      var from = nowTmp.subtract(1,'days'); 
     // console.log("init now")  
      //console.log(now) 
      //console.log(from)
      var url = window.location.href+"/"+sensorId+"?tz="+timezone+"&from="+from+"&to="+now;
      var datas = await ajaxPromise(url) ;
      var json = JSON.parse(datas);   
      chart.data.datasets[0].data = json.datas; 
      chart.data.labels = json.dates; 
      chart.update();
    }
    catch (err) {
        //how to handle , todo reu
        console.log(err);
    }
};

// Update data when selected input change 
var fetchDatas = async function (timezone,from,to,range) {
    try {     
      //var chart,sensorId ; 
      if (range ==="") {
        for (var i=0; i<canvasArray.length; i++) {
        /* if (canvasArray[i].sensor === sensorId) {
            chart = canvasArray[i].chart ; 
            break; 
          }*/
        var sensorId = canvasArray[i].sensor; 
        var chart = canvasArray[i].chart; 
      
        var url = window.location.origin+window.location.pathname+"/"+sensorId+"?tz="+timezone+"&from="+from+"&to="+to;
        var datas = await ajaxPromise (url)
        var json = JSON.parse(datas)
        chart.data.datasets[0].data = json.datas; 
        chart.data.labels = json.dates; 
        chart.update();
        }
      }
      else {
        for (var i=0; i<canvasArray.length; i++) {
        /* if (canvasArray[i].sensor === sensorId) {
            chart = canvasArray[i].chart ; 
            break; 
          }*/
        var sensorId = canvasArray[i].sensor; 
        var chart = canvasArray[i].chart; 
      
        var url = window.location.origin+window.location.pathname+"/"+sensorId+"?tz="+timezone+"&range="+range;
        var datas = await ajaxPromise (url)
        var json = JSON.parse(datas)
        chart.data.datasets[0].data = json.datas; 
        chart.data.labels = json.dates; 
        chart.update();
        }
      }
    }
    catch (err) {
        //how to handle , todo
        //alert js ? 
        console.log(err);
    }
};

async function updateDatas() { 
  try { 
    var startDate = document.getElementById('startDate'); 
    var endDate = document.getElementById('endDate'); 
    await fetchDatas(tz,startDate.value,endDate.value,"") ; 
  }
  catch (err){
    // log error 
    console.log(err)
  }
} 

// ON LOAD : Create canva element and initiate chart with datas
window.onload = function() {
  for(i=0; i<charts.length; i++) {
    var current = charts[i]; 
    var sensorId = current.id.split("-")[1]; 
    var canvas = document.createElement('canvas');
    //canvas.style = 'background-color:black' //don't fix transparent background on download
    current.appendChild(canvas); 
    var ctx = canvas.getContext('2d'); 
    var config = createConfig(sensorId); 
    chart = new Chart(ctx,config);
    canvasArray.push({"sensor":sensorId, "chart":chart}); 
   // initChartDatas(chart,sensorId,tz,selects[i].value);
    initChartDatas(chart,sensorId,tz);
    // test tmp 
    //var url_base64 = canvas.toDataURL('image/png') ; 
    //var test = document.getElementById('link')
    //test.href = url_base64;  
  }
}

selectRange.onchange = async function () {
  await fetchDatas(tz,"","",this.value)
}

// EXPORT CSV
function download_csv(sensorId) {
  var csvArray = [];
  for (var i=0; i<canvasArray.length; i++) {
    if (canvasArray[i].sensor === sensorId) {
      var currentChart = canvasArray[i].chart; 
      csvArray.push(currentChart.data.labels)
      csvArray.push(currentChart.data.datasets[0].data)
    }
  }

  var csv = 'Date,Valeur\n';
   /* test.forEach(function(row) {
            csv += row.join(',');
            csv += "\n";
    });*/
    for (var i=0;i<csvArray[0].length;i++) {
      csv+= csvArray[0][i]+','+csvArray[1][i]+"\n";
    }
    var hiddenElement = document.createElement('a');
    hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);
    hiddenElement.target = '_blank';
    hiddenElement.download = sensorId+'.csv';
    hiddenElement.click();
}

/*function download_graph(element,sensorId) {
  console.log(element)
  for (var i=0; i<canvasArray.length; i++) {
    if (canvasArray[i].sensor === sensorId) {
      var currentChart = canvasArray[i].chart; 
      element.src = currentChart.toBase64Image(); 
    //  document.getElementById("url").src=url;
      element.click()
    }
  }
}*/


</script>
<!-- KEEP AWAY 

// ON SELECT CHANGE : update datas
// works, but right way ? (index j always 3 if print in on change function)
for (j=0; j<selects.length;j++) { 
  selects[j].onchange = function () {
    getAndUpdateDatas(this.id.split('-')[1],tz,this.value); 
  }
}// Update data when selected input change 
var getAndUpdateDatas = function (sensorId,timezone,range) {
    try {     
      var chart ; 
      for (var i=0; i<canvasArray.length; i++) {
        if (canvasArray[i].sensor === sensorId) {
          chart = canvasArray[i].chart ; 
          break; 
        }
      }
      var url = window.location.href+"/"+sensorId+"?tz="+timezone+"&range="+range;
      getAjax(url, function(data) {
        json = JSON.parse(data);
        chart.data.datasets[0].data = json.datas; 
        chart.data.labels = json.dates; 
        chart.update();
      })
    }
    catch (err) {
        //how to handle , todo
        console.log(err);
    }
};
-->

<!--script sens={{sensDatas}} >
 /* console.log(Handlebars.templates) ; 
  console.log("{{sensDatas.sensInfos}}");
  var group = '{{group}}'
  console.log(group)
  console.log(document)
  var x = document.currentScript.getAttribute('sens')
  console.log(x) ; 
  console.log({{@exphbs}}) ; 
 // var sensDatas = {{{sensDatas}}} ; 

  for (var i=0; i<sensDatas.length;i++) {
    console.log(sensDatas[i])
  }
  console.log(sensDatas)
  console.log(sensDatas.length)
  console.log(sensDatas[0][0].sensInfos)
  console.log(sensDatas.datasTime) */
// recup sensor id ::: ou tricky par les elements 
// Mais récupèrer mes données aussi ici .. 
// axios au final ? 
// hiding it ? 
</script-->
<!--script>
/** script from Arne H. Bitubekk answer https://stackoverflow.com/questions/14964035/how-to-export-javascript-array-info-to-csv-on-client-side */ 
  // Example data given in question text
var data = [
  ['name1', 'city1', 'some other info'],
  ['name2', 'city2', 'more info']
];

// Building the CSV from the Data two-dimensional array
// Each column is separated by ";" and new line "\n" for next row
var csvContent = '';
data.forEach(function(infoArray, index) {
  dataString = infoArray.join(';');
  csvContent += index < data.length ? dataString + '\n' : dataString;
});

// The download function takes a CSV string, the filename and mimeType as parameters
// Scroll/look down at the bottom of this snippet to see how download is called
var downloadVar = function(link,content, fileName, mimeType) {
  var a = document.createElement('a');
  mimeType = mimeType || 'application/octet-stream';

  if (navigator.msSaveBlob) { // IE10
    navigator.msSaveBlob(new Blob([content], {
      type: mimeType
    }), fileName);
  } else if (URL && 'download' in a) { //html5 A[download]
    a.href = URL.createObjectURL(new Blob([content], {
      type: mimeType
    }));
    a.setAttribute('download', fileName);
    link.appendChild(a);
    a.click();
    link.removeChild(a);
  } else {
    location.href = 'data:application/octet-stream,' + encodeURIComponent(content); // only this mime type is supported
  }
}

function dl (aObject) {
  console.log(aObject)
  downloadVar(aObject, csvContent, 'filename.csv','text/csv;encoding:utf-8');
}

//download(csvContent, 'dowload.csv', 'text/csv;encoding:utf-8');
</script-->

<!--script>
var data = [
   ['Foo', 'programmer'],
   ['Bar', 'bus driver'],
   ['Moo', 'Reindeer Hunter']
];
 
 
function download_csv(sensorId) {
    var csv = 'Name,Title\n';
    data.forEach(function(row) {
            csv += row.join(',');
            csv += "\n";
    });
 
    console.log(csv);
    // data via element chart js via sensor id ? 
    var hiddenElement = document.createElement('a');
    hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);
    hiddenElement.target = '_blank';
    hiddenElement.download = sensorId+'.csv';
    hiddenElement.click();
}
</script-->